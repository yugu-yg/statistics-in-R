coef.removeZero <- coef(lm(pctAsleep[pctSedentary > 0.2]~pctSedentary[pctSedentary > 0.2]))
coef.removeZero
abline(coef.removeZero[1], coef.removeZero[2], col = "red")
# Code here for plot with regression line removing zero sedentary
plot(pctSedentary[pctSedentary > 0.05], pctAsleep[pctSedentary > 0.05],
ylab = "Percentage ASleep", xlab = "Percentage Of Sedentary Activities")
coef.removeZero <- coef(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
coef.removeZero
abline(coef.removeZero[1], coef.removeZero[2], col = "red")
# Code here for plot with regression line removing zero sedentary
plot(pctSedentary[pctSedentary > 0.1], pctAsleep[pctSedentary > 0.1],
ylab = "Percentage ASleep", xlab = "Percentage Of Sedentary Activities")
coef.removeZero <- coef(lm(pctAsleep[pctSedentary > 0.1]~pctSedentary[pctSedentary > 0.1]))
coef.removeZero
abline(coef.removeZero[1], coef.removeZero[2], col = "red")
# Code here for plot with regression line removing zero sedentary
plot(pctSedentary[pctSedentary > 0.05], pctAsleep[pctSedentary > 0.05],
ylab = "Percentage ASleep", xlab = "Percentage Of Sedentary Activities")
coef.removeZero <- coef(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
coef.removeZero
abline(coef.removeZero[1], coef.removeZero[2], col = "red")
# Code here bootstrap and parametric confidence intervals
#bootstrap CI
bootstrap.LM <- bootstrapLM(pctAsleep[pctSedentary > 0.05],
pctSedentary[pctSedentary > 0.05],
repetitions = 1000)
bootstrap.CI <- bootstrap.LM$confidence.interval
#parametric CI
parametric.CI <- confint(coef.removeZero)
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=60), tidy=TRUE)
blindData<-read.table("blindData.txt",sep="\t",header=FALSE)
par(mfrow=c(1,2))
hist(blindData[,1],breaks=100,main="Plot A",xlab="")
hist(blindData[,2],breaks=100,main="Plot B",xlab="")
bootFun1<-function(df, FUN){
group1<-df$y[df$group=="group1"]
group2<-df$y[df$group=="group2"]
sample1 <- sample(x=group1, size=length(group1),replace = TRUE)
sample2 <- sample(x=group2, size=length(group2),replace = TRUE)
return(FUN(sample1,sample2))
}
bootFun2<-function(df, FUN){
whObs <- sample(x=1:nrow(df), size=nrow(df),replace = TRUE)
sampleDf<-df[whObs,]
sample1<-sampleDf$y[sampleDf$group=="group1"]
sample2<-sampleDf$y[sampleDf$group=="group2"]
return(FUN(sample1,sample2))
}
bootstrapLM <- function(y,x, repetitions, confidence.level=0.95){
stat.obs <- coef(lm(y~x))
bootFun<-function(){
sampled <- sample(1:length(y), size=length(y),replace = TRUE)
coef(lm(y[sampled]~x[sampled]))
}
stat.boot<-replicate(repetitions,bootFun())
# this next line that defines `nm` is advanced code, but
# simply finds the name of the input x value
# and saves this name as `nm`.
nm <-deparse(substitute(x))
row.names(stat.boot)[2]<-nm
level<-1-confidence.level
confidence.interval <- apply(stat.boot,1,quantile,probs=c(level/2,1-level/2))  ### *** ###
out<-cbind("lower"=confidence.interval[1,],"estimate"=stat.obs,"upper"=confidence.interval[2,])
return(list(confidence.interval = out, bootStats=stat.boot))
}
fitbit<-read.csv("fitbit.csv",header=TRUE)
head(fitbit[,1:8])
# code to evaluate the total number of minutes
totMinutes <- with(fitbit, (MinutesOfSleep + minutesOfLightActivity + minutesOfModerateActivity + minutesOfSedentaryActivities + minutesOfIntenseActivity))
proportion <- totMinutes/(24 * 60)
summary(proportion)
hist(proportion, main = 'Proportion of the sum that covers the entire day',
xlab = 'Proportion', breaks = 50)
#code to make new variables as percent of total minutes.
pctAsleep <- fitbit$MinutesOfSleep / totMinutes
pctSedentary <- fitbit$minutesOfSedentaryActivities / totMinutes
summary(pctAsleep)
summary(pctSedentary)
# code to plot the two plots side-by-side
par(mfrow = c(1, 2))
with(fitbit, plot(minutesOfSedentaryActivities/60, MinutesOfSleep/60,
ylab = "Hours Asleep", xlab = "Hours Of Sedentary Activities"))
plot(pctSedentary, pctAsleep, ylab = "Percentage ASleep",
xlab = "Percentage Of Sedentary Activities")
# Code here for plot with regression line
plot(pctSedentary, pctAsleep, ylab = "Percentage ASleep",
xlab = "Percentage Of Sedentary Activities")
coef <- coef(lm(pctAsleep~pctSedentary))
coef
abline(coef[1], coef[2], col = "red")
# Code here for plot with regression line removing zero sedentary
plot(pctSedentary[pctSedentary > 0.05], pctAsleep[pctSedentary > 0.05],
ylab = "Percentage ASleep", xlab = "Percentage Of Sedentary Activities")
coef.removeZero <- coef(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
coef.removeZero
abline(coef.removeZero[1], coef.removeZero[2], col = "red")
# Code here bootstrap and parametric confidence intervals
#bootstrap CI
bootstrap.LM <- bootstrapLM(pctAsleep[pctSedentary > 0.05],
pctSedentary[pctSedentary > 0.05],
repetitions = 1000)
bootstrap.CI <- bootstrap.LM$confidence.interval
#parametric CI
parametric.CI <- confint(coef.removeZero)
# Code here bootstrap and parametric confidence intervals
#bootstrap CI
bootstrap.LM <- bootstrapLM(pctAsleep[pctSedentary > 0.05],
pctSedentary[pctSedentary > 0.05],
repetitions = 1000)
bootstrap.CI <- bootstrap.LM$confidence.interval
#parametric CI
parametric.CI <- confint(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
bootstrap.CI
parametric.CI
b1CI<-rbind(c(lower=paramConfInt[2,1],
estimate=unname(coef(e.fit)[2]),
upper=paramConfInt[2,2]),
permutConfInt[2,])
# Code here bootstrap and parametric confidence intervals
#bootstrap CI
bootstrap.LM <- bootstrapLM(pctAsleep[pctSedentary > 0.05],
pctSedentary[pctSedentary > 0.05],
repetitions = 1000)
bootstrap.CI <- bootstrap.LM$confidence.interval
#parametric CI
parametric.CI <- confint(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
bootstrap.CI
parametric.CI
#plot
b1CI<-rbind(c(lower=parametric.CI[2,1], estimate=unname(coef.removeZero[2]),
upper=parametric.CI[2,2]), bootstrap.CI[2,])
b0CI<-rbind(c(lower=parametric.CI[1,1], estimate=unname(coefcoef.removeZero[1]),
upper=parametric.CI[1,2]), bootstrap.CI[1,])
# Code here bootstrap and parametric confidence intervals
#bootstrap CI
bootstrap.LM <- bootstrapLM(pctAsleep[pctSedentary > 0.05],
pctSedentary[pctSedentary > 0.05],
repetitions = 1000)
bootstrap.CI <- bootstrap.LM$confidence.interval
#parametric CI
parametric.CI <- confint(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
bootstrap.CI
parametric.CI
#plot
b1CI<-rbind(c(lower=parametric.CI[2,1], estimate=unname(coef.removeZero[2]),
upper=parametric.CI[2,2]), bootstrap.CI[2,])
b0CI<-rbind(c(lower=parametric.CI[1,1], estimate=unname(coef.removeZero[1]),
upper=parametric.CI[1,2]), bootstrap.CI[1,])
library(gplots)
# Code here bootstrap and parametric confidence intervals
#bootstrap CI
bootstrap.LM <- bootstrapLM(pctAsleep[pctSedentary > 0.05],
pctSedentary[pctSedentary > 0.05],
repetitions = 1000)
bootstrap.CI <- bootstrap.LM$confidence.interval
#parametric CI
parametric.CI <- confint(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
bootstrap.CI
parametric.CI
#plot
b1CI<-rbind(c(lower=parametric.CI[2,1], estimate=unname(coef.removeZero[2]),
upper=parametric.CI[2,2]), bootstrap.CI[2,])
b0CI<-rbind(c(lower=parametric.CI[1,1], estimate=unname(coef.removeZero[1]),
upper=parametric.CI[1,2]), bootstrap.CI[1,])
library(ggplot2)
par(mar=c(8,4,4,1))
plotCI(b1CI[,2],ui=b1CI[,3] ,li=b1CI[,1],
main="compare confidence intervals for the slope",
col=c("blue","red"), pch=19, xaxt="n", xlim=c(0,3))
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=60), tidy=TRUE)
blindData<-read.table("blindData.txt",sep="\t",header=FALSE)
par(mfrow=c(1,2))
hist(blindData[,1],breaks=100,main="Plot A",xlab="")
hist(blindData[,2],breaks=100,main="Plot B",xlab="")
bootFun1<-function(df, FUN){
group1<-df$y[df$group=="group1"]
group2<-df$y[df$group=="group2"]
sample1 <- sample(x=group1, size=length(group1),replace = TRUE)
sample2 <- sample(x=group2, size=length(group2),replace = TRUE)
return(FUN(sample1,sample2))
}
bootFun2<-function(df, FUN){
whObs <- sample(x=1:nrow(df), size=nrow(df),replace = TRUE)
sampleDf<-df[whObs,]
sample1<-sampleDf$y[sampleDf$group=="group1"]
sample2<-sampleDf$y[sampleDf$group=="group2"]
return(FUN(sample1,sample2))
}
bootstrapLM <- function(y,x, repetitions, confidence.level=0.95){
stat.obs <- coef(lm(y~x))
bootFun<-function(){
sampled <- sample(1:length(y), size=length(y),replace = TRUE)
coef(lm(y[sampled]~x[sampled]))
}
stat.boot<-replicate(repetitions,bootFun())
# this next line that defines `nm` is advanced code, but
# simply finds the name of the input x value
# and saves this name as `nm`.
nm <-deparse(substitute(x))
row.names(stat.boot)[2]<-nm
level<-1-confidence.level
confidence.interval <- apply(stat.boot,1,quantile,probs=c(level/2,1-level/2))  ### *** ###
out<-cbind("lower"=confidence.interval[1,],"estimate"=stat.obs,"upper"=confidence.interval[2,])
return(list(confidence.interval = out, bootStats=stat.boot))
}
fitbit<-read.csv("fitbit.csv",header=TRUE)
head(fitbit[,1:8])
# code to evaluate the total number of minutes
totMinutes <- with(fitbit, (MinutesOfSleep + minutesOfLightActivity + minutesOfModerateActivity + minutesOfSedentaryActivities + minutesOfIntenseActivity))
proportion <- totMinutes/(24 * 60)
summary(proportion)
hist(proportion, main = 'Proportion of the sum that covers the entire day',
xlab = 'Proportion', breaks = 50)
#code to make new variables as percent of total minutes.
pctAsleep <- fitbit$MinutesOfSleep / totMinutes
pctSedentary <- fitbit$minutesOfSedentaryActivities / totMinutes
summary(pctAsleep)
summary(pctSedentary)
# code to plot the two plots side-by-side
par(mfrow = c(1, 2))
with(fitbit, plot(minutesOfSedentaryActivities/60, MinutesOfSleep/60,
ylab = "Hours Asleep", xlab = "Hours Of Sedentary Activities"))
plot(pctSedentary, pctAsleep, ylab = "Percentage ASleep",
xlab = "Percentage Of Sedentary Activities")
# Code here for plot with regression line
plot(pctSedentary, pctAsleep, ylab = "Percentage ASleep",
xlab = "Percentage Of Sedentary Activities")
coef <- coef(lm(pctAsleep~pctSedentary))
coef
abline(coef[1], coef[2], col = "red")
# Code here for plot with regression line removing zero sedentary
plot(pctSedentary[pctSedentary > 0.05], pctAsleep[pctSedentary > 0.05],
ylab = "Percentage ASleep", xlab = "Percentage Of Sedentary Activities")
coef.removeZero <- coef(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
coef.removeZero
abline(coef.removeZero[1], coef.removeZero[2], col = "red")
# Code here bootstrap and parametric confidence intervals
#bootstrap CI
bootstrap.LM <- bootstrapLM(pctAsleep[pctSedentary > 0.05],
pctSedentary[pctSedentary > 0.05],
repetitions = 1000)
bootstrap.CI <- bootstrap.LM$confidence.interval
#parametric CI
parametric.CI <- confint(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
bootstrap.CI
parametric.CI
#plot
b1CI<-rbind(c(lower=parametric.CI[2,1], estimate=unname(coef.removeZero[2]),
upper=parametric.CI[2,2]), bootstrap.CI[2,])
b0CI<-rbind(c(lower=parametric.CI[1,1], estimate=unname(coef.removeZero[1]),
upper=parametric.CI[1,2]), bootstrap.CI[1,])
library(ggplot2)
par(mar=c(8,4,4,1))
plotCI(b1CI[,2],ui=b1CI[,3] ,li=b1CI[,1],
main="compare confidence intervals for the slope",
col=c("blue","red"), pch=19, xaxt="n", xlim=c(0,3))
install.packages("gplots")
# Code here bootstrap and parametric confidence intervals
#bootstrap CI
bootstrap.LM <- bootstrapLM(pctAsleep[pctSedentary > 0.05],
pctSedentary[pctSedentary > 0.05],
repetitions = 1000)
bootstrap.CI <- bootstrap.LM$confidence.interval
#parametric CI
parametric.CI <- confint(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
bootstrap.CI
parametric.CI
#plot
b1CI<-rbind(c(lower=parametric.CI[2,1], estimate=unname(coef.removeZero[2]),
upper=parametric.CI[2,2]), bootstrap.CI[2,])
b0CI<-rbind(c(lower=parametric.CI[1,1], estimate=unname(coef.removeZero[1]),
upper=parametric.CI[1,2]), bootstrap.CI[1,])
library(gplota)
# Code here bootstrap and parametric confidence intervals
#bootstrap CI
bootstrap.LM <- bootstrapLM(pctAsleep[pctSedentary > 0.05],
pctSedentary[pctSedentary > 0.05],
repetitions = 1000)
bootstrap.CI <- bootstrap.LM$confidence.interval
#parametric CI
parametric.CI <- confint(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
bootstrap.CI
parametric.CI
#plot
b1CI<-rbind(c(lower=parametric.CI[2,1], estimate=unname(coef.removeZero[2]),
upper=parametric.CI[2,2]), bootstrap.CI[2,])
b0CI<-rbind(c(lower=parametric.CI[1,1], estimate=unname(coef.removeZero[1]),
upper=parametric.CI[1,2]), bootstrap.CI[1,])
library(gplots)
par(mar=c(8,4,4,1))
plotCI(b1CI[,2],ui=b1CI[,3] ,li=b1CI[,1],
main="compare confidence intervals for the slope",
col=c("blue","red"), pch=19, xaxt="n", xlim=c(0,3))
axis(1,at=c(1,2),labels=c("Parameteric","Bootstrap"),las=2)
par(mar=c(8,4,4,1))
plotCI(b0CI[,2], ui=b0CI[,3], li=b0CI[,1],
main="compare confidence intervals for the intercept",
col=c("blue","red"),pch=19,xaxt="n",xlim=c(0,3))
axis(1,at=c(1,2),labels=c("Parameteric","Bootstrap"),las=2)
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=60), tidy=TRUE)
blindData<-read.table("blindData.txt",sep="\t",header=FALSE)
par(mfrow=c(1,2))
hist(blindData[,1],breaks=100,main="Plot A",xlab="")
hist(blindData[,2],breaks=100,main="Plot B",xlab="")
bootFun1<-function(df, FUN){
group1<-df$y[df$group=="group1"]
group2<-df$y[df$group=="group2"]
sample1 <- sample(x=group1, size=length(group1),replace = TRUE)
sample2 <- sample(x=group2, size=length(group2),replace = TRUE)
return(FUN(sample1,sample2))
}
bootFun2<-function(df, FUN){
whObs <- sample(x=1:nrow(df), size=nrow(df),replace = TRUE)
sampleDf<-df[whObs,]
sample1<-sampleDf$y[sampleDf$group=="group1"]
sample2<-sampleDf$y[sampleDf$group=="group2"]
return(FUN(sample1,sample2))
}
bootstrapLM <- function(y,x, repetitions, confidence.level=0.95){
stat.obs <- coef(lm(y~x))
bootFun<-function(){
sampled <- sample(1:length(y), size=length(y),replace = TRUE)
coef(lm(y[sampled]~x[sampled]))
}
stat.boot<-replicate(repetitions,bootFun())
# this next line that defines `nm` is advanced code, but
# simply finds the name of the input x value
# and saves this name as `nm`.
nm <-deparse(substitute(x))
row.names(stat.boot)[2]<-nm
level<-1-confidence.level
confidence.interval <- apply(stat.boot,1,quantile,probs=c(level/2,1-level/2))  ### *** ###
out<-cbind("lower"=confidence.interval[1,],"estimate"=stat.obs,"upper"=confidence.interval[2,])
return(list(confidence.interval = out, bootStats=stat.boot))
}
fitbit<-read.csv("fitbit.csv",header=TRUE)
head(fitbit[,1:8])
# code to evaluate the total number of minutes
totMinutes <- with(fitbit, (MinutesOfSleep + minutesOfLightActivity + minutesOfModerateActivity + minutesOfSedentaryActivities + minutesOfIntenseActivity))
proportion <- totMinutes/(24 * 60)
summary(proportion)
hist(proportion, main = 'Proportion of the sum that covers the entire day',
xlab = 'Proportion', breaks = 50)
#code to make new variables as percent of total minutes.
pctAsleep <- fitbit$MinutesOfSleep / totMinutes
pctSedentary <- fitbit$minutesOfSedentaryActivities / totMinutes
summary(pctAsleep)
summary(pctSedentary)
# code to plot the two plots side-by-side
par(mfrow = c(1, 2))
with(fitbit, plot(minutesOfSedentaryActivities/60, MinutesOfSleep/60,
ylab = "Hours Asleep", xlab = "Hours Of Sedentary Activities"))
plot(pctSedentary, pctAsleep, ylab = "Percentage ASleep",
xlab = "Percentage Of Sedentary Activities")
# Code here for plot with regression line
plot(pctSedentary, pctAsleep, ylab = "Percentage ASleep",
xlab = "Percentage Of Sedentary Activities")
coef <- coef(lm(pctAsleep~pctSedentary))
coef
abline(coef[1], coef[2], col = "red")
# Code here for plot with regression line removing zero sedentary
plot(pctSedentary[pctSedentary > 0.05], pctAsleep[pctSedentary > 0.05],
ylab = "Percentage ASleep", xlab = "Percentage Of Sedentary Activities")
coef.removeZero <- coef(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
coef.removeZero
abline(coef.removeZero[1], coef.removeZero[2], col = "red")
# Code here bootstrap and parametric confidence intervals
#bootstrap CI
bootstrap.LM <- bootstrapLM(pctAsleep[pctSedentary > 0.05],
pctSedentary[pctSedentary > 0.05],
repetitions = 1000)
bootstrap.CI <- bootstrap.LM$confidence.interval
#parametric CI
parametric.CI <- confint(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
bootstrap.CI
parametric.CI
#plot
b1CI<-rbind(c(lower=parametric.CI[2,1], estimate=unname(coef.removeZero[2]),
upper=parametric.CI[2,2]), bootstrap.CI[2,])
b0CI<-rbind(c(lower=parametric.CI[1,1], estimate=unname(coef.removeZero[1]),
upper=parametric.CI[1,2]), bootstrap.CI[1,])
library(gplots)
par(mar=c(8,4,4,1))
plotCI(b1CI[,2],ui=b1CI[,3] ,li=b1CI[,1],
main="compare confidence intervals for the slope",
col=c("blue","red"), pch=19, xaxt="n", xlim=c(0,3))
axis(1,at=c(1,2),labels=c("Parameteric","Bootstrap"),las=2)
par(mar=c(8,4,4,1))
plotCI(b0CI[,2], ui=b0CI[,3], li=b0CI[,1],
main="compare confidence intervals for the intercept",
col=c("blue","red"),pch=19,xaxt="n",xlim=c(0,3))
axis(1,at=c(1,2),labels=c("Parameteric","Bootstrap"),las=2)
# Code here bootstrap and parametric confidence intervals
#bootstrap CI
bootstrap.LM <- bootstrapLM(pctAsleep[pctSedentary > 0.05],
pctSedentary[pctSedentary > 0.05],
repetitions = 1000)
bootstrap.CI <- bootstrap.LM$confidence.interval
#parametric CI
parametric.CI <- confint(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
bootstrap.CI
parametric.CI
#plot
b1CI<-rbind(c(lower=parametric.CI[2,1], estimate=unname(coef.removeZero[2]),
upper=parametric.CI[2,2]), bootstrap.CI[2,])
b0CI<-rbind(c(lower=parametric.CI[1,1], estimate=unname(coef.removeZero[1]),
upper=parametric.CI[1,2]), bootstrap.CI[1,])
library(gplots)
par(mar=c(8,4,4,1))
plotCI(b1CI[,2],ui=b1CI[,3] ,li=b1CI[,1],
main="compare confidence intervals for the slope",
col=c("blue","red"), pch=19, xaxt="n", xlim=c(0,3))
axis(1,at=c(1,2),labels=c("Parameteric","Bootstrap"),las=2)
par(mar=c(8,4,4,1))
plotCI(b0CI[,2], ui=b0CI[,3], li=b0CI[,1],
main="compare confidence intervals for the intercept",
col=c("blue","red"),pch=19,xaxt="n",xlim=c(0,3))
axis(1,at=c(1,2),labels=c("Parameteric","Bootstrap"),las=2)
b1CI
b0CI
# Code here bootstrap and parametric confidence intervals
#bootstrap CI
bootstrap.LM <- bootstrapLM(pctAsleep[pctSedentary > 0.05],
pctSedentary[pctSedentary > 0.05],
repetitions = 1000)
bootstrap.CI <- bootstrap.LM$confidence.interval
#parametric CI
parametric.CI <- confint(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
bootstrap.CI
parametric.CI
#plot
b1CI<-rbind(c(lower=parametric.CI[2,1], estimate=unname(coef.removeZero[2]),
upper=parametric.CI[2,2]), bootstrap.CI[2,])
b0CI<-rbind(c(lower=parametric.CI[1,1], estimate=unname(coef.removeZero[1]),
upper=parametric.CI[1,2]), bootstrap.CI[1,])
library(gplots)
par(mar=c(8,4,4,1))
plotCI(b1CI[,2],ui=b1CI[,3] ,li=b1CI[,1],
main="bootstrap and parametric confidence intervals the slope",
col=c("red", "blue"), pch=19, xaxt="n", xlim=c(0,3))
axis(1,at=c(1,2),labels=c("Parameteric CI","Bootstrap CI"),las=2)
par(mar=c(8,4,4,1))
plotCI(b0CI[,2], ui=b0CI[,3], li=b0CI[,1],
main="bootstrap and parametric confidence intervals of the intercept",
col=c("red", "blue"),pch=19,xaxt="n",xlim=c(0,3))
axis(1,at=c(1,2),labels=c("Parameteric CI","Bootstrap CI"),las=2)
b1CI
b0CI
# Code here bootstrap and parametric confidence intervals
#bootstrap CI
bootstrap.LM <- bootstrapLM(pctAsleep[pctSedentary > 0.05],
pctSedentary[pctSedentary > 0.05],
repetitions = 1000)
bootstrap.CI <- bootstrap.LM$confidence.interval
#parametric CI
parametric.CI <- confint(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
bootstrap.CI
parametric.CI
#plot
b1CI<-rbind(c(lower=parametric.CI[2,1], estimate=unname(coef.removeZero[2]),
upper=parametric.CI[2,2]), bootstrap.CI[2,])
b0CI<-rbind(c(lower=parametric.CI[1,1], estimate=unname(coef.removeZero[1]),
upper=parametric.CI[1,2]), bootstrap.CI[1,])
library(gplots)
par(mar=c(8,4,4,1))
plotCI(b1CI[,2],ui=b1CI[,3] ,li=b1CI[,1],
main="bootstrap and parametric confidence intervals the slope",
col=c("red", "blue"), pch=19, xaxt="n", xlim=c(0,3))
axis(1,at=c(1,2),labels=c("Parameteric CI","Bootstrap CI"),las=1)
par(mar=c(8,4,4,1))
plotCI(b0CI[,2], ui=b0CI[,3], li=b0CI[,1],
main="bootstrap and parametric confidence intervals of the intercept",
col=c("red", "blue"),pch=19,xaxt="n",xlim=c(0,3))
axis(1,at=c(1,2),labels=c("Parameteric CI","Bootstrap CI"),las=1)
b1CI
b0CI
# Code here bootstrap and parametric confidence intervals
#bootstrap CI
bootstrap.LM <- bootstrapLM(pctAsleep[pctSedentary > 0.05],
pctSedentary[pctSedentary > 0.05],
repetitions = 1000)
bootstrap.CI <- bootstrap.LM$confidence.interval
#parametric CI
parametric.CI <- confint(lm(pctAsleep[pctSedentary > 0.05]~pctSedentary[pctSedentary > 0.05]))
bootstrap.CI
parametric.CI
#plot
b0CI<-rbind(c(lower=parametric.CI[1,1], estimate=unname(coef.removeZero[1]),
upper=parametric.CI[1,2]), bootstrap.CI[1,])
b1CI<-rbind(c(lower=parametric.CI[2,1], estimate=unname(coef.removeZero[2]),
upper=parametric.CI[2,2]), bootstrap.CI[2,])
library(gplots)
par(mar=c(8,4,4,1))
plotCI(b0CI[,2], ui=b0CI[,3], li=b0CI[,1],
main="bootstrap and parametric confidence intervals of the intercept",
col=c("red", "blue"),pch=19,xaxt="n",xlim=c(0,3))
axis(1,at=c(1,2),labels=c("Parameteric CI","Bootstrap CI"),las=1)
par(mar=c(8,4,4,1))
plotCI(b1CI[,2],ui=b1CI[,3] ,li=b1CI[,1],
main="bootstrap and parametric confidence intervals the slope",
col=c("red", "blue"), pch=19, xaxt="n", xlim=c(0,3))
axis(1,at=c(1,2),labels=c("Parameteric CI","Bootstrap CI"),las=1)
b0CI
b1CI
# code to evaluate the total number of minutes
totMinutes <- with(fitbit, (MinutesOfSleep + minutesOfLightActivity
+ minutesOfModerateActivity + minutesOfSedentaryActivities
+ minutesOfIntenseActivity))
proportion <- totMinutes/(24 * 60)
summary(proportion)
hist(proportion, main = 'Proportion of the sum that covers the entire day',
xlab = 'Proportion')
