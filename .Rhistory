#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- cholang_num[permutation,][testIndexes, ]
trainData <- cholang_num[permutation,][-testIndexes, ]
#Use the test and train data partitions however you desire...
predError<-apply(summary(bCholang)$which[,-1],1,function(x){
lmObj<-lm(trainData$n_days ~ .,data=trainData[,x,drop=FALSE])
testPred<-predict(lmObj,newdata=testData)
mean((testData$n_days-testPred)^2)
})
predErrorMat[i,]<-predError
}
set.seed(78912)
permutation<-sample(1:nrow(cholang_num))
folds <- cut(1:nrow(cholang_num),breaks=10,labels=FALSE)
predErrorMat<-matrix(nrow=10,ncol=nrow(summary(bCholang)$which))
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- cholang_num[permutation,][testIndexes, ]
trainData <- cholang_num[permutation,][-testIndexes, ]
#Use the test and train data partitions however you desire...
predError<-apply(summary(bCholang)$which[,-1],1,function(x){
lmObj<-lm(trainData$n_days ~ .,data=trainData[,-1][,x,drop=FALSE])
testPred<-predict(lmObj,newdata=testData[,-1])
mean((testData$n_days-testPred)^2)
})
predErrorMat[i,]<-predError
}
set.seed(78912)
permutation<-sample(1:nrow(cholang_num))
folds <- cut(1:nrow(cholang_num),breaks=10,labels=FALSE)
predErrorMat<-matrix(nrow=10,ncol=nrow(summary(bCholang)$which))
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- cholang_num[permutation,][testIndexes, ]
trainData <- cholang_num[permutation,][-testIndexes, ]
#Use the test and train data partitions however you desire...
predError<-apply(summary(bCholang)$which[,-1],1,function(x){
lmObj<-lm(trainData$n_days ~ .,data=trainData[,-1][,x,drop=FALSE])
testPred<-predict(lmObj,newdata=testData[,-1])
mean((testData$n_days-testPred)^2)
})
predErrorMat[i,]<-predError
}
set.seed(78912)
permutation<-sample(1:nrow(cholang_num))
folds <- cut(1:nrow(cholang_num),breaks=10,labels=FALSE)
predErrorMat<-matrix(nrow=10,ncol=nrow(summary(bCholang)$which))
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- cholang_num[permutation,][testIndexes, ]
trainData <- cholang_num[permutation,][-testIndexes, ]
#Use the test and train data partitions however you desire...
predError<-apply(summary(bCholang)$which[,-1],1,function(x){
lmObj<-lm(trainData$n_days ~ .,data=trainData)
testPred<-predict(lmObj,newdata=testData[,-1])
mean((testData$n_days-testPred)^2)
})
predErrorMat[i,]<-predError
}
colMeans(predErrorMat)
set.seed(78912)
permutation<-sample(1:nrow(cholang))
folds <- cut(1:nrow(cholang),breaks=10,labels=FALSE)
predErrorMat<-matrix(nrow=10,ncol=nrow(summary(bCholang)$which))
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- cholang_num[permutation,][testIndexes, ]
trainData <- cholang_num[permutation,][-testIndexes, ]
#Use the test and train data partitions however you desire...
predError<-apply(summary(bCholang)$which[,-1],1,function(x){
lmObj<-lm(trainData$n_days ~ .,data=trainData[,-1][,x,drop=FALSE])
testPred<-predict(lmObj,newdata=testData[,-1])
mean((testData$n_days-testPred)^2)
})
predErrorMat[i,]<-predError
}
bCholang = regsubsets(n_days ~ ., cholang)
summary(bCholang)$out
bCholang = regsubsets(n_days ~ ., cholang_num)
summary(bCholang)$out
set.seed(78912)
permutation<-sample(1:nrow(cholang))
folds <- cut(1:nrow(cholang),breaks=10,labels=FALSE)
predErrorMat<-matrix(nrow=10,ncol=nrow(summary(bCholang)$which))
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- cholang_num[permutation,][testIndexes, ]
trainData <- cholang_num[permutation,][-testIndexes, ]
#Use the test and train data partitions however you desire...
predError<-apply(summary(bCholang)$which[,-1],1,function(x){
lmObj<-lm(trainData$n_days ~ .,data=trainData[,-1][,x,drop=FALSE])
testPred<-predict(lmObj,newdata=testData[,-1])
mean((testData$n_days-testPred)^2)
})
predErrorMat[i,]<-predError
}
colMeans(predErrorMat)
set.seed(78912)
permutation<-sample(1:nrow(cholang_num))
folds <- cut(1:nrow(cholang_num),breaks=10,labels=FALSE)
predErrorMat<-matrix(nrow=10,ncol=nrow(summary(bCholang)$which))
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- cholang_num[permutation,][testIndexes, ]
trainData <- cholang_num[permutation,][-testIndexes, ]
#Use the test and train data partitions however you desire...
predError<-apply(summary(bCholang)$which[,-1],1,function(x){
lmObj<-lm(trainData$n_days ~ .,data=trainData[,-1][,x,drop=FALSE])
testPred<-predict(lmObj,newdata=testData[,-1])
mean((testData$n_days-testPred)^2)
})
predErrorMat[i,]<-predError
}
colMeans(predErrorMat)
set.seed(78912)
permutation<-sample(1:nrow(cholang_num))
folds <- cut(1:nrow(cholang_num),breaks=10,labels=FALSE)
predErrorMat<-matrix(nrow=10,ncol=nrow(summary(bCholang)$which))
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- cholang_num[permutation,][testIndexes, ]
trainData <- cholang_num[permutation,][-testIndexes, ]
#Use the test and train data partitions however you desire...
predError<-apply(summary(bCholang)$which[,-1],1,function(x){
lmObj<-lm(trainData$n_days ~ .,data=trainData[,-1][,x,drop=FALSE])
testPred<-predict(lmObj,newdata=testData[,-1])
mean((testData$n_days-testPred)^2)
})
predErrorMat[i,]<-predError
}
colMeans(predErrorMat)
LOOCV<-function(lm){
vals<-residuals(lm)/(1-lm.influence(lm)$hat)
sum(vals^2)/length(vals)
}
calculateCriterion<-function(x=NULL,y,dataset,lmObj=NULL){
#dataset contains only explanatory variables
#x is a vector of logicals, length equal to number of explanatory variables in dataset, telling us which variables to keep
#sigma2 is estimate of model on full dataset
# either x or lmObj must be given to specify the smaller lm model
sigma2=summary(lm(y~.,data=dataset))$sigma^2
if(is.null(lmObj)) lmObj<-lm(y ~ ., data=dataset[,x,drop=FALSE]) #don't include intercept
sumlmObj<-summary(lmObj)
n<-nrow(dataset)
p<-sum(x)
RSS<-sumlmObj$sigma^2*(n-p-1)
c(R2=sumlmObj$r.squared,
R2adj=sumlmObj$adj.r.squared,
"RSS/n"=RSS/n,
LOOCV=LOOCV(lmObj),
Cp=RSS/n+2*sigma2*(p+1)/n,
CpAlt=RSS/sigma2-n+2*(p+1),
AIC=AIC(lmObj), # n*log(RSS/n)+2*p +constant,
BIC=BIC(lmObj) # n*log(RSS/n)+p*log(n) + constant
)
}
critCholang<-apply(summary(bCholang)$which[,-1],1,calculateCriterion,
y=cholang$n_days,
dataset=cholang_num[,-1])
critCholang<-t(critCholang)
data.frame(
AIC = which.min(abs(critCholang[,"AIC"])),
LOOCV = which.min(abs(critCholang[,"LOOCV"]))
)
summary(cholang.sub)$out
set.seed(78912)
permutation<-sample(1:nrow(cholang_num))
folds <- cut(1:nrow(cholang_num),breaks=10,labels=FALSE)
predErrorMat<-matrix(nrow=10,ncol=nrow(summary(bCholang)$which))
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- cholang_num[permutation,][testIndexes, ]
trainData <- cholang_num[permutation,][-testIndexes, ]
#Use the test and train data partitions however you desire...
predError<-apply(summary(bCholang)$which[,-1],1,function(x){
lmObj<-lm(trainData$n_days ~ .,data=trainData[,-1][,x,drop=FALSE])
testPred<-predict(lmObj,newdata=testData[,-1])
mean((testData$n_days-testPred)^2)
})
predErrorMat[i,]<-predError
}
colMeans(predErrorMat)
LOOCV<-function(lm){
vals<-residuals(lm)/(1-lm.influence(lm)$hat)
sum(vals^2)/length(vals)
}
calculateCriterion<-function(x=NULL,y,dataset,lmObj=NULL){
#dataset contains only explanatory variables
#x is a vector of logicals, length equal to number of explanatory variables in dataset, telling us which variables to keep
#sigma2 is estimate of model on full dataset
# either x or lmObj must be given to specify the smaller lm model
sigma2=summary(lm(y~.,data=dataset))$sigma^2
if(is.null(lmObj)) lmObj<-lm(y ~ ., data=dataset[,x,drop=FALSE]) #don't include intercept
sumlmObj<-summary(lmObj)
n<-nrow(dataset)
p<-sum(x)
RSS<-sumlmObj$sigma^2*(n-p-1)
c(R2=sumlmObj$r.squared,
R2adj=sumlmObj$adj.r.squared,
"RSS/n"=RSS/n,
LOOCV=LOOCV(lmObj),
Cp=RSS/n+2*sigma2*(p+1)/n,
CpAlt=RSS/sigma2-n+2*(p+1),
AIC=AIC(lmObj), # n*log(RSS/n)+2*p +constant,
BIC=BIC(lmObj) # n*log(RSS/n)+p*log(n) + constant
)
}
critCholang<-apply(summary(bCholang)$which[,-1],1,calculateCriterion,
y=cholang$n_days,
dataset=cholang_num[,-1])
critCholang<-t(critCholang)
critCholang
LOOCV<-function(lm){
vals<-residuals(lm)/(1-lm.influence(lm)$hat)
sum(vals^2)/length(vals)
}
calculateCriterion<-function(x=NULL,y,dataset,lmObj=NULL){
#dataset contains only explanatory variables
#x is a vector of logicals, length equal to number of explanatory variables in dataset, telling us which variables to keep
#sigma2 is estimate of model on full dataset
# either x or lmObj must be given to specify the smaller lm model
sigma2=summary(lm(y~.,data=dataset))$sigma^2
if(is.null(lmObj)) lmObj<-lm(y ~ ., data=dataset[,x,drop=FALSE]) #don't include intercept
sumlmObj<-summary(lmObj)
n<-nrow(dataset)
p<-sum(x)
RSS<-sumlmObj$sigma^2*(n-p-1)
c(R2=sumlmObj$r.squared,
R2adj=sumlmObj$adj.r.squared,
"RSS/n"=RSS/n,
LOOCV=LOOCV(lmObj),
Cp=RSS/n+2*sigma2*(p+1)/n,
CpAlt=RSS/sigma2-n+2*(p+1),
AIC=AIC(lmObj), # n*log(RSS/n)+2*p +constant,
BIC=BIC(lmObj) # n*log(RSS/n)+p*log(n) + constant
)
}
critCholang<-apply(summary(bCholang)$which[,-1],1,calculateCriterion,
y=cholang$n_days,
dataset=cholang_num[,-1])
critCholang<-t(critCholang)
critCholang
data.frame(
AIC = which.min(abs(critCholang[,"AIC"])),
LOOCV = which.min(abs(critCholang[,"LOOCV"]))
)
bCholang = regsubsets(n_days ~ ., cholang)
summary(bCholang)$out
set.seed(78912)
permutation<-sample(1:nrow(cholang_num))
folds <- cut(1:nrow(cholang_num),breaks=10,labels=FALSE)
predErrorMat<-matrix(nrow=10,ncol=nrow(summary(bCholang2)$which))
bCholang2 = regsubsets(n_days ~ ., cholang_num)
summary(bCholang2)$out
set.seed(78912)
permutation<-sample(1:nrow(cholang_num))
folds <- cut(1:nrow(cholang_num),breaks=10,labels=FALSE)
predErrorMat<-matrix(nrow=10,ncol=nrow(summary(bCholang2)$which))
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- cholang_num[permutation,][testIndexes, ]
trainData <- cholang_num[permutation,][-testIndexes, ]
#Use the test and train data partitions however you desire...
predError<-apply(summary(bCholang2)$which[,-1],1,function(x){
lmObj<-lm(trainData$n_days ~ .,data=trainData[,-1][,x,drop=FALSE])
testPred<-predict(lmObj,newdata=testData[,-1])
mean((testData$n_days-testPred)^2)
})
predErrorMat[i,]<-predError
}
colMeans(predErrorMat)
LOOCV<-function(lm){
vals<-residuals(lm)/(1-lm.influence(lm)$hat)
sum(vals^2)/length(vals)
}
calculateCriterion<-function(x=NULL,y,dataset,lmObj=NULL){
#dataset contains only explanatory variables
#x is a vector of logicals, length equal to number of explanatory variables in dataset, telling us which variables to keep
#sigma2 is estimate of model on full dataset
# either x or lmObj must be given to specify the smaller lm model
sigma2=summary(lm(y~.,data=dataset))$sigma^2
if(is.null(lmObj)) lmObj<-lm(y ~ ., data=dataset[,x,drop=FALSE]) #don't include intercept
sumlmObj<-summary(lmObj)
n<-nrow(dataset)
p<-sum(x)
RSS<-sumlmObj$sigma^2*(n-p-1)
c(R2=sumlmObj$r.squared,
R2adj=sumlmObj$adj.r.squared,
"RSS/n"=RSS/n,
LOOCV=LOOCV(lmObj),
Cp=RSS/n+2*sigma2*(p+1)/n,
CpAlt=RSS/sigma2-n+2*(p+1),
AIC=AIC(lmObj), # n*log(RSS/n)+2*p +constant,
BIC=BIC(lmObj) # n*log(RSS/n)+p*log(n) + constant
)
}
critCholang<-apply(summary(bCholang2)$which[,-1],1,calculateCriterion,
y=cholang$n_days,
dataset=cholang_num[,-1])
critCholang<-t(critCholang)
critCholang
data.frame(
AIC = which.min(abs(critCholang[,"AIC"])),
LOOCV = which.min(abs(critCholang[,"LOOCV"]))
)
# Code for diagnostics
par(mfrow = c(2, 3))
plot(lm(n_days ~ bilirubin+albumin+copper+alk_phos+stage), which=1:6)
# Code for diagnostics
par(mfrow = c(2, 3))
plot(lm(n_days ~ bilirubin+albumin+copper+alk_phos+stage,data = cholang), which=1:6)
# Code for diagnostics
par(mfrow = c(2, 3))
plot(lm(n_days ~ bilirubin+albumin+copper+alk_phos,data = cholang), which=1:6)
# Code for diagnostics
par(mfrow = c(2, 3))
plot(lm(n_days ~ bilirubin+albumin+copper+alk_phos,data = cholang), which=1:6)
# Code for diagnostics
par(mfrow = c(2, 3))
plot(lm(n_days ~ status + bilirubin+albumin+copper+alk_phos+stage,data = cholang), which=1:6)
# Code for diagnostics
par(mfrow = c(2, 3))
plot(lm(n_days ~ statusD + bilirubin+albumin+copper+alk_phos+stage,data = cholang), which=1:6)
# Code for diagnostics
par(mfrow = c(2, 3))
plot(lm(n_days ~ bilirubin+albumin+copper+alk_phos+stage,data = cholang), which=1:6)
# Code for diagnostics
par(mfrow = c(2, 3))
plot(lm(n_days ~status+bilirubin+albumin+copper+alk_phos+stage,data = cholang), which=1:6)
# Code for diagnostics
par(mfrow = c(2, 3))
plot(lm(n_days ~bilirubin+albumin+copper+alk_phos+stage,data = cholang), which=1:6)
fitted.results.selected <- predict(glm(formula = status ~ n_days + bilirubin + alk_phos + prothrombin,
family = binomial(link = "logit"), data = train),newdata=test,type='response')
fitted.results <- ifelse(fitted.results.selected > 0.5,1,0)
head(fitted.results)
misClasificError <- mean(fitted.results != new.status)
print(paste('Accuracy',1-misClasificError))
fitted.results <- predict(glm,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
new.status <- ifelse(test$status == "D",1,0)
boxplot(fitted.results~cholang$stage,col=palette()[5:8],outline=FALSE)
fitted.results <- predict(glm,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
new.status <- ifelse(test$status == "D",1,0)
boxplot(new.status~cholang$stage,col=palette()[5:8],outline=FALSE)
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=60), tidy=TRUE)
library(ggplot2)
library(gplots)
library(GGally)
library(ggcorrplot)
library(pheatmap)
library(alluvial)
library(leaps)
library(dplyr)
#import data
cholang <- read.csv('cholangitis.csv', header = T, stringsAsFactors = T, na.strings = "NA")
cholang <- cholang[,-1]
summary(cholang)
#change the NA data into another factor level in the 'drug' column
cholang$drug <- as.character(cholang$drug)
cholang$drug <- ifelse(is.na(cholang$drug), 'NotParticipated', cholang$drug)
cholang$drug <- as.factor(cholang$drug)
#change the NA data in numerical columns into the median value
cholang_num <- select_if(cholang, is.numeric)
head(cholang_num)
cholang_num <- as.data.frame(apply(cholang_num, 2, function(x){
x[is.na(x)] <- median(x, na.rm = T)
return(x)
}))
#change the NA data in categorical columns into the most frequent factor level
cholang_cate <- select_if(cholang, is.factor)
head(cholang_cate)
cholang_cate <- as.data.frame(apply(cholang_cate, 2, function(x){
x[is.na(x)] <- names(which.max(table(x)))
return(x)
}))
# pairs plot
cholang %>%
select(age, bilirubin, cholesterol, albumin, copper, alk_phos, sgot, tryglicerides, platelets, prothrombin, stage, drug, sex) %>%
ggpairs(aes(fill = drug))
cholang_num %>%
cor() %>%
ggcorrplot(type = "upper",
hc.order = T,
lab = T,
sig.level = .5)
ggplot(cholang, aes(n_days, cholesterol, color = sex)) + geom_line()
ggplot(cholang, aes(n_days, cholesterol, color = status)) + geom_line()
par(mfrow=c(2,3))
hist(cholang$age,main="age")
hist(cholang$bilirubin,main="bilirubin")
hist(cholang$cholesterol,main="cholesterol")
hist(cholang$copper,main="copper")
hist(cholang$alk_phos,main="alk_phos")
hist(cholang$platelets,main="platelets")
cholang_cate$Freq<-1
cholangCateAggregates<-aggregate(Freq ~ .,data=cholang_cate,FUN=sum)
alluvial(cholangCateAggregates[,-ncol(cholangCateAggregates)], freq=cholangCateAggregates$Freq,
col=palette())
alluvial(cholangCateAggregates[,c(1:3)], freq=cholangCateAggregates$Freq,
col= ifelse(cholangCateAggregates$status == "D", "orange", "grey"))
par(mfrow = c(1, 2))
barplot(with(cholang,table(sex,status)),beside=TRUE,legend=TRUE,col=palette()[1:2])
barplot(with(cholang,table(drug,status)),beside=TRUE,legend=TRUE,col=palette()[5:7])
par(mfrow=c(2,3))
boxplot(cholang$n_days~cholang$stage,col=palette()[2:5],outline=FALSE)
boxplot(cholang$n_days~cholang$status,col=palette()[6:8],outline=FALSE)
boxplot(cholang$n_days~cholang$ascites,col=palette()[2:3],outline=FALSE)
boxplot(cholang$n_days~cholang$edema,col=palette()[5:7],outline=FALSE)
boxplot(cholang$bilirubin~cholang$edema,col=palette()[2:5],outline=FALSE)
boxplot(cholang$prothrombin~cholang$stage,col=palette()[5:8],outline=FALSE)
lmFull = lm(n_days ~ ., cholang)
summary(lmFull)
# Code for diagnostics
par(mfrow = c(2, 3))
plot(lmFull, which=1:6)
bCholang = regsubsets(n_days ~ ., cholang)
summary(bCholang)$out
bCholang2 = regsubsets(n_days ~ ., cholang_num)
summary(bCholang2)$out
set.seed(78912)
permutation<-sample(1:nrow(cholang_num))
folds <- cut(1:nrow(cholang_num),breaks=10,labels=FALSE)
predErrorMat<-matrix(nrow=10,ncol=nrow(summary(bCholang2)$which))
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- cholang_num[permutation,][testIndexes, ]
trainData <- cholang_num[permutation,][-testIndexes, ]
#Use the test and train data partitions however you desire...
predError<-apply(summary(bCholang2)$which[,-1],1,function(x){
lmObj<-lm(trainData$n_days ~ .,data=trainData[,-1][,x,drop=FALSE])
testPred<-predict(lmObj,newdata=testData[,-1])
mean((testData$n_days-testPred)^2)
})
predErrorMat[i,]<-predError
}
colMeans(predErrorMat)
LOOCV<-function(lm){
vals<-residuals(lm)/(1-lm.influence(lm)$hat)
sum(vals^2)/length(vals)
}
calculateCriterion<-function(x=NULL,y,dataset,lmObj=NULL){
#dataset contains only explanatory variables
#x is a vector of logicals, length equal to number of explanatory variables in dataset, telling us which variables to keep
#sigma2 is estimate of model on full dataset
# either x or lmObj must be given to specify the smaller lm model
sigma2=summary(lm(y~.,data=dataset))$sigma^2
if(is.null(lmObj)) lmObj<-lm(y ~ ., data=dataset[,x,drop=FALSE]) #don't include intercept
sumlmObj<-summary(lmObj)
n<-nrow(dataset)
p<-sum(x)
RSS<-sumlmObj$sigma^2*(n-p-1)
c(R2=sumlmObj$r.squared,
R2adj=sumlmObj$adj.r.squared,
"RSS/n"=RSS/n,
LOOCV=LOOCV(lmObj),
Cp=RSS/n+2*sigma2*(p+1)/n,
CpAlt=RSS/sigma2-n+2*(p+1),
AIC=AIC(lmObj), # n*log(RSS/n)+2*p +constant,
BIC=BIC(lmObj) # n*log(RSS/n)+p*log(n) + constant
)
}
critCholang<-apply(summary(bCholang2)$which[,-1],1,calculateCriterion,
y=cholang$n_days,
dataset=cholang_num[,-1])
critCholang<-t(critCholang)
critCholang
data.frame(
AIC = which.min(abs(critCholang[,"AIC"])),
LOOCV = which.min(abs(critCholang[,"LOOCV"]))
)
# Code for diagnostics
par(mfrow = c(2, 3))
plot(lm(n_days ~bilirubin+albumin+copper+alk_phos+stage,data = cholang), which=1:6)
cholang2 = cholang[-which(cholang$status == "CL")]
set.seed(123)
nTest<-.1*nrow(cholang2)
whTest<-sample(1:nrow(cholang2),size=nTest)
test<-cholang2[whTest,]
train<-cholang2[-whTest,]
glm <- glm(status ~.,family=binomial(link='logit'),data=train)
summary(glm)
anova(glm, test="Chisq")
fitted.results <- predict(glm,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
new.status <- ifelse(test$status == "D",1,0)
misClasificError <- mean(fitted.results != new.status)
print(paste('Accuracy',1-misClasificError))
step(glm, direction="both",trace=0)
step(na.omit(glm), direction="both",trace=0)
par(mfrow = c(1, 2))
barplot(with(cholang,table(sex,status)),beside=TRUE,legend=TRUE,col=palette()[1:2])
barplot(with(cholang,table(drug,status)),beside=TRUE,legend=TRUE,col=palette()[5:7])
par(mfrow=c(2,3))
boxplot(cholang$n_days~cholang$stage,col=palette()[2:5],outline=FALSE)
boxplot(cholang$n_days~cholang$status,col=palette()[6:8],outline=FALSE)
boxplot(cholang$n_days~cholang$ascites,col=palette()[2:3],outline=FALSE)
boxplot(cholang$n_days~cholang$edema,col=palette()[5:7],outline=FALSE)
boxplot(cholang$bilirubin~cholang$edema,col=palette()[2:5],outline=FALSE)
boxplot(cholang$prothrombin~cholang$stage,col=palette()[5:8],outline=FALSE)
